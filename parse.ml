type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | MOD
  | ASSIGN
  | EQ
  | NEQ
  | LESSER
  | LESSEREQ
  | GREATER
  | GREATEREQ
  | AND
  | OR
  | IF
  | ELSE
  | WHILE
  | FOR
  | INT
  | BOOL
  | STR
  | RETURN
  | COMMA
  | CLASS
  | PRIVATE
  | PUBLIC
  | PROTECTED
  | NUM of (int)
  | BLIT of (bool)
  | STRLIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parse.mly"
open Ast
# 47 "parse.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* LBRACK *);
  263 (* RBRACK *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* TIMES *);
  267 (* DIVIDE *);
  268 (* MOD *);
  269 (* ASSIGN *);
  270 (* EQ *);
  271 (* NEQ *);
  272 (* LESSER *);
  273 (* LESSEREQ *);
  274 (* GREATER *);
  275 (* GREATEREQ *);
  276 (* AND *);
  277 (* OR *);
  278 (* IF *);
  279 (* ELSE *);
  280 (* WHILE *);
  281 (* FOR *);
  282 (* INT *);
  283 (* BOOL *);
  284 (* STR *);
  285 (* RETURN *);
  286 (* COMMA *);
  287 (* CLASS *);
  288 (* PRIVATE *);
  289 (* PUBLIC *);
  290 (* PROTECTED *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  291 (* NUM *);
  292 (* BLIT *);
  293 (* STRLIT *);
  294 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\004\000\005\000\005\000\005\000\003\000\
\003\000\003\000\008\000\008\000\006\000\009\000\010\000\010\000\
\010\000\007\000\011\000\011\000\013\000\013\000\012\000\012\000\
\014\000\014\000\014\000\014\000\014\000\014\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\016\000\016\000\017\000\017\000\000\000"

let yylen = "\002\000\
\003\000\000\000\002\000\006\000\001\000\001\000\001\000\000\000\
\003\000\002\000\000\000\003\000\002\000\001\000\001\000\001\000\
\001\000\008\000\000\000\001\000\001\000\003\000\000\000\002\000\
\002\000\003\000\007\000\005\000\009\000\003\000\001\000\001\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\004\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\005\000\006\000\007\000\055\000\000\000\000\000\
\000\000\015\000\016\000\017\000\000\000\000\000\000\000\000\000\
\014\000\003\000\000\000\001\000\000\000\000\000\010\000\013\000\
\000\000\009\000\000\000\000\000\020\000\000\000\000\000\000\000\
\000\000\022\000\000\000\004\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\031\000\032\000\033\000\
\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\018\000\024\000\025\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\049\000\026\000\000\000\
\000\000\000\000\030\000\000\000\000\000\052\000\000\000\000\000\
\000\000\000\000\000\000\039\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\050\000\000\000\028\000\000\000\054\000\000\000\000\000\027\000\
\000\000\000\000\029\000"

let yydgoto = "\002\000\
\006\000\007\000\013\000\008\000\009\000\014\000\015\000\038\000\
\016\000\017\000\028\000\050\000\029\000\051\000\052\000\085\000\
\086\000"

let yysindex = "\008\000\
\048\255\000\000\000\000\000\000\000\000\000\000\086\255\048\255\
\249\254\000\000\000\000\000\000\049\000\002\255\086\255\014\255\
\000\000\000\000\015\255\000\000\086\255\086\255\000\000\000\000\
\053\255\000\000\030\255\066\255\000\000\086\255\086\255\080\255\
\065\255\000\000\086\255\000\000\084\255\054\255\086\255\008\255\
\054\255\096\255\105\255\106\255\008\255\000\000\000\000\000\000\
\052\255\082\255\054\255\079\000\000\000\161\000\115\255\008\255\
\008\255\008\255\100\000\008\255\008\255\000\000\000\000\000\000\
\008\255\008\255\008\255\008\255\008\255\008\255\008\255\008\255\
\008\255\008\255\008\255\008\255\008\255\000\000\000\000\180\000\
\199\000\121\000\000\000\056\000\107\255\000\000\232\000\125\255\
\125\255\109\255\109\255\000\000\015\001\015\001\236\255\236\255\
\236\255\236\255\003\001\246\000\054\255\054\255\008\255\008\255\
\000\000\110\255\000\000\142\000\000\000\054\255\008\255\000\000\
\218\000\054\255\000\000"

let yyrindex = "\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\130\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\
\000\000\000\000\000\000\000\000\002\000\128\255\000\000\000\000\
\000\000\000\000\140\255\000\000\000\000\139\255\000\000\000\000\
\000\000\000\000\037\255\000\000\000\000\148\255\037\255\000\000\
\148\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\085\255\000\000\148\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\151\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\153\255\000\000\000\000\010\255\154\255\
\177\255\108\255\131\255\000\000\029\000\033\000\198\255\219\255\
\240\255\005\000\047\255\202\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\150\000\249\255\000\000\000\000\016\000\000\000\120\000\
\000\000\000\000\000\000\227\255\129\000\161\255\216\255\000\000\
\060\000"

let yytablesize = 546
let yytable = "\054\000\
\002\000\008\000\021\000\022\000\059\000\106\000\107\000\023\000\
\001\000\040\000\048\000\055\000\048\000\026\000\112\000\080\000\
\081\000\082\000\115\000\084\000\087\000\063\000\033\000\019\000\
\088\000\089\000\090\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\027\000\011\000\048\000\
\011\000\011\000\046\000\047\000\048\000\049\000\027\000\046\000\
\020\000\046\000\037\000\024\000\025\000\060\000\037\000\040\000\
\030\000\041\000\011\000\031\000\011\000\011\000\108\000\084\000\
\061\000\011\000\046\000\046\000\032\000\036\000\113\000\011\000\
\011\000\011\000\011\000\042\000\046\000\043\000\044\000\003\000\
\004\000\005\000\045\000\035\000\039\000\034\000\062\000\034\000\
\046\000\047\000\048\000\049\000\034\000\034\000\034\000\034\000\
\034\000\056\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\034\000\057\000\058\000\037\000\105\000\037\000\010\000\
\011\000\012\000\034\000\037\000\037\000\037\000\037\000\079\000\
\069\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\008\000\019\000\038\000\110\000\038\000\067\000\068\000\
\069\000\037\000\038\000\038\000\038\000\038\000\021\000\008\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\023\000\051\000\035\000\053\000\035\000\018\000\053\000\034\000\
\038\000\035\000\035\000\109\000\000\000\000\000\000\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\000\000\
\000\000\036\000\000\000\036\000\000\000\000\000\000\000\035\000\
\036\000\036\000\000\000\000\000\000\000\000\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\042\000\000\000\
\042\000\000\000\047\000\000\000\047\000\000\000\036\000\000\000\
\000\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\043\000\000\000\043\000\047\000\000\000\
\000\000\000\000\000\000\042\000\000\000\000\000\000\000\047\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\044\000\000\000\044\000\065\000\066\000\067\000\068\000\069\000\
\043\000\000\000\000\000\000\000\000\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\045\000\008\000\045\000\
\000\000\000\000\000\000\000\000\000\000\044\000\000\000\000\000\
\000\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\002\000\002\000\002\000\040\000\000\000\040\000\
\000\000\041\000\045\000\041\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\040\000\000\000\000\000\041\000\041\000\
\040\000\040\000\000\000\000\000\041\000\041\000\000\000\000\000\
\000\000\000\000\040\000\000\000\000\000\000\000\041\000\065\000\
\066\000\067\000\068\000\069\000\000\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\000\000\000\000\064\000\
\000\000\000\000\000\000\000\000\000\000\104\000\065\000\066\000\
\067\000\068\000\069\000\000\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\083\000\000\000\000\000\000\000\
\000\000\000\000\000\000\065\000\066\000\067\000\068\000\069\000\
\000\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\103\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\066\000\067\000\068\000\069\000\000\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\111\000\000\000\
\000\000\000\000\000\000\000\000\000\000\065\000\066\000\067\000\
\068\000\069\000\000\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\000\000\000\000\000\000\000\000\
\065\000\066\000\067\000\068\000\069\000\000\000\070\000\071\000\
\072\000\073\000\074\000\075\000\076\000\077\000\101\000\000\000\
\000\000\000\000\000\000\065\000\066\000\067\000\068\000\069\000\
\000\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\102\000\000\000\000\000\000\000\000\000\065\000\066\000\
\067\000\068\000\069\000\000\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\114\000\000\000\000\000\000\000\
\000\000\065\000\066\000\067\000\068\000\069\000\000\000\070\000\
\071\000\072\000\073\000\074\000\075\000\076\000\077\000\065\000\
\066\000\067\000\068\000\069\000\000\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\065\000\066\000\067\000\
\068\000\069\000\000\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\065\000\066\000\067\000\068\000\069\000\000\000\
\070\000\071\000\072\000\073\000\074\000\075\000\065\000\066\000\
\067\000\068\000\069\000\000\000\000\000\000\000\072\000\073\000\
\074\000\075\000"

let yycheck = "\040\000\
\000\000\000\000\001\001\002\001\045\000\101\000\102\000\015\000\
\001\000\002\001\001\001\041\000\003\001\021\000\110\000\056\000\
\057\000\058\000\114\000\060\000\061\000\051\000\030\000\031\001\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\022\000\002\001\030\001\
\004\001\005\001\035\001\036\001\037\001\038\001\031\000\001\001\
\000\000\003\001\035\000\038\001\038\001\002\001\039\000\002\001\
\004\001\004\001\022\001\030\001\024\001\025\001\103\000\104\000\
\013\001\029\001\020\001\021\001\003\001\005\001\111\000\035\001\
\036\001\037\001\038\001\022\001\030\001\024\001\025\001\032\001\
\033\001\034\001\029\001\004\001\001\001\001\001\005\001\003\001\
\035\001\036\001\037\001\038\001\008\001\009\001\010\001\011\001\
\012\001\002\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\002\001\002\001\001\001\003\001\003\001\026\001\
\027\001\028\001\030\001\008\001\009\001\010\001\011\001\005\001\
\012\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\000\000\003\001\001\001\023\001\003\001\010\001\011\001\
\012\001\030\001\008\001\009\001\010\001\011\001\003\001\005\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\005\001\003\001\001\001\003\001\003\001\008\000\039\000\031\000\
\030\001\008\001\009\001\104\000\255\255\255\255\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\255\255\
\255\255\001\001\255\255\003\001\255\255\255\255\255\255\030\001\
\008\001\009\001\255\255\255\255\255\255\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\001\001\255\255\
\003\001\255\255\001\001\255\255\003\001\255\255\030\001\255\255\
\255\255\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\001\001\255\255\003\001\021\001\255\255\
\255\255\255\255\255\255\030\001\255\255\255\255\255\255\030\001\
\014\001\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\001\001\255\255\003\001\008\001\009\001\010\001\011\001\012\001\
\030\001\255\255\255\255\255\255\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\001\001\005\001\003\001\
\255\255\255\255\255\255\255\255\255\255\030\001\255\255\255\255\
\255\255\255\255\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\026\001\027\001\028\001\001\001\255\255\003\001\
\255\255\001\001\030\001\003\001\255\255\255\255\255\255\255\255\
\255\255\255\255\014\001\015\001\255\255\255\255\014\001\015\001\
\020\001\021\001\255\255\255\255\020\001\021\001\255\255\255\255\
\255\255\255\255\030\001\255\255\255\255\255\255\030\001\008\001\
\009\001\010\001\011\001\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\255\255\255\255\001\001\
\255\255\255\255\255\255\255\255\255\255\030\001\008\001\009\001\
\010\001\011\001\012\001\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\001\001\255\255\255\255\255\255\
\255\255\255\255\255\255\008\001\009\001\010\001\011\001\012\001\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\001\001\255\255\
\255\255\255\255\255\255\255\255\255\255\008\001\009\001\010\001\
\011\001\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\003\001\255\255\255\255\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\003\001\255\255\
\255\255\255\255\255\255\008\001\009\001\010\001\011\001\012\001\
\255\255\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\003\001\255\255\255\255\255\255\255\255\008\001\009\001\
\010\001\011\001\012\001\255\255\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\003\001\255\255\255\255\255\255\
\255\255\008\001\009\001\010\001\011\001\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\008\001\
\009\001\010\001\011\001\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\008\001\009\001\010\001\
\011\001\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\008\001\009\001\010\001\011\001\012\001\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\008\001\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\016\001\017\001\
\018\001\019\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACK\000\
  RBRACK\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  MOD\000\
  ASSIGN\000\
  EQ\000\
  NEQ\000\
  LESSER\000\
  LESSEREQ\000\
  GREATER\000\
  GREATEREQ\000\
  AND\000\
  OR\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  FOR\000\
  INT\000\
  BOOL\000\
  STR\000\
  RETURN\000\
  COMMA\000\
  CLASS\000\
  PRIVATE\000\
  PUBLIC\000\
  PROTECTED\000\
  EOF\000\
  "

let yynames_block = "\
  NUM\000\
  BLIT\000\
  STRLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'class_decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 36 "parse.mly"
                        ( (_1, fst decls, snd decls) )
# 368 "parse.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "parse.mly"
              ( [] )
# 374 "parse.ml"
               : 'class_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'class_decls) in
    Obj.repr(
# 40 "parse.mly"
                      ( _1 :: _2 )
# 382 "parse.ml"
               : 'class_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'modifer) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 45 "parse.mly"
  (
    {
      cmod = _1;
      cname = _3;
      vars = fst _5;
      funcs = snd _5
    }
  )
# 398 "parse.ml"
               : 'cdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 55 "parse.mly"
           ( Private )
# 404 "parse.ml"
               : 'modifer))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parse.mly"
          ( Public )
# 410 "parse.ml"
               : 'modifer))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parse.mly"
             ( Protected )
# 416 "parse.ml"
               : 'modifer))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parse.mly"
                 ( ([], [])              )
# 422 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 61 "parse.mly"
                    ( ((_1 :: fst _3), snd _3) )
# 430 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decls) in
    Obj.repr(
# 62 "parse.mly"
               ( (fst _2, (_1 :: snd _2)) )
# 438 "parse.ml"
               : 'decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parse.mly"
              ( [] )
# 444 "parse.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl_list) in
    Obj.repr(
# 66 "parse.mly"
                           (  _1 :: _3 )
# 452 "parse.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 70 "parse.mly"
           ( (_1, _2) )
# 460 "parse.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primitive) in
    Obj.repr(
# 73 "parse.mly"
            ( _1 )
# 467 "parse.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parse.mly"
          ( Int   )
# 473 "parse.ml"
               : 'primitive))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parse.mly"
          ( Bool  )
# 479 "parse.ml"
               : 'primitive))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parse.mly"
          ( String )
# 485 "parse.ml"
               : 'primitive))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 83 "parse.mly"
  (
    {
      rtyp=fst _1;
      fname=snd _1;
      formals=_3;
      locals=_6;
      body=_7
    }
  )
# 503 "parse.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "parse.mly"
              ( [] )
# 509 "parse.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formals_list) in
    Obj.repr(
# 96 "parse.mly"
                 ( _1 )
# 516 "parse.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 99 "parse.mly"
        ( [_1] )
# 523 "parse.ml"
               : 'formals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formals_list) in
    Obj.repr(
# 100 "parse.mly"
                             ( _1::_3 )
# 531 "parse.ml"
               : 'formals_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parse.mly"
                ( [] )
# 537 "parse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 104 "parse.mly"
                    ( _1::_2 )
# 545 "parse.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 107 "parse.mly"
                                            ( Expr _1      )
# 552 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 108 "parse.mly"
                                            ( Block _2 )
# 559 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 111 "parse.mly"
                                            ( If(_3, _5, _7) )
# 568 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 112 "parse.mly"
                                            ( While (_3, _5)  )
# 576 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 113 "parse.mly"
                                                     ( For (_3, _5, _7, _9) )
# 586 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 115 "parse.mly"
                                            ( Return _2      )
# 593 "parse.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 118 "parse.mly"
                 ( NUM(_1)            )
# 600 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 119 "parse.mly"
                     ( BoolLit(_1)            )
# 607 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 120 "parse.mly"
                     ( StrLit(_1)            )
# 614 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 121 "parse.mly"
                     ( Id(_1)                 )
# 621 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parse.mly"
                     ( Binop(_1, Add,   _3)   )
# 629 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parse.mly"
                     ( Binop(_1, Sub,   _3)   )
# 637 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parse.mly"
                      ( Binop(_1, Times,   _3)   )
# 645 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parse.mly"
                       ( Binop(_1, Divide,   _3)   )
# 653 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 126 "parse.mly"
                     ( Binop(_1, Mod, _3)     )
# 661 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 127 "parse.mly"
                     ( Binop(_1, Equal, _3)   )
# 669 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 128 "parse.mly"
                     ( Binop(_1, Neq, _3)     )
# 677 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 129 "parse.mly"
                         ( Binop(_1, Less,  _3)   )
# 685 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 130 "parse.mly"
                           ( Binop(_1, LesserEq,  _3)   )
# 693 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parse.mly"
                          ( Binop(_1, Greater,  _3)   )
# 701 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parse.mly"
                            ( Binop(_1, GreaterEq,  _3)   )
# 709 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parse.mly"
                     ( Binop(_1, And,   _3)   )
# 717 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parse.mly"
                     ( Binop(_1, Or,    _3)   )
# 725 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parse.mly"
                     ( Assign(_1, _3)         )
# 733 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 136 "parse.mly"
                       ( _2                   )
# 740 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 138 "parse.mly"
                              ( Call (_1, _3)  )
# 748 "parse.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 143 "parse.mly"
              ( [] )
# 754 "parse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 144 "parse.mly"
         ( _1 )
# 761 "parse.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 147 "parse.mly"
        ( [_1] )
# 768 "parse.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 148 "parse.mly"
                    ( _1::_3 )
# 776 "parse.ml"
               : 'args))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
